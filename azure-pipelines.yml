################################################################################
# TorchSharp's PR validation build
################################################################################

name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

variables:
  MyRunNumber:  $[counter('MyRunNumber', 52201)]

  # Set this to 'true' to build the libtorch-* packages as part of main branch CI and
  # push them to the artifacts feed of the Azure CI project
  BuildLibTorchPackages: false
  PushPackagesToFeed: false

resources:
  containers:
#   - container: CentosContainer
#     image: mcr.microsoft.com/dotnet-buildtools/prereqs:centos-7-mlnet-8bba86b-20190314145033
# dotnet-buildtools/prereqs containers can be browsed at
#   https://mcrflowprodcentralus.data.mcr.microsoft.com/mcrprod/dotnet-buildtools/prereqs?P1=1616630425&P2=1&P3=1&P4=xAN4nwxX9ps%2BMi75FMzu0iGuhA7luhLsZKUGf0Q9fFU%3D&se=2021-03-25T00%3A00%3A25Z&sig=j1uhQmj8EAbZqaSyGS%2Fwz0ETxwrGVhN3WFwX4OpNz4w%3D&sp=r&sr=b&sv=2015-02-21

   - container: UbuntuContainer
     image: mcr.microsoft.com/dotnet-buildtools/prereqs:ubuntu-18.04-mlnet-20210924170306-87445d2

jobs:
- template: /build/ci/job-template.yml
  parameters:
    name: Ubuntu_x64
    # This reports the GLIB_ and GLIBCXX_ dependencies on the system which ends up getting baked into
    # the generated libTorchSharp.so (and partly determines which Linux systems that binary will
    # be usable on), then installs clang-6.0 (LibTorch likes this for building C++ 14), then installs .NET 6.0
    prepScript:
        ldd --version && (/sbin/ldconfig -p | grep stdc++) && (strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX) &&
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DE19EB17684BA42D &&
        sudo apt-get -y update &&
        sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libomp-dev libomp5 &&
        wget https://packages.microsoft.com/config/ubuntu/22.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb &&
        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb &&
        sudo apt-get update; sudo apt-get install -y apt-transport-https && sudo apt-get update &&
        ldd --version && (/sbin/ldconfig -p | grep stdc++) && (strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX)
    buildScript: dotnet build /p:SkipCuda=true -c
    testScript: dotnet test /p:SkipCuda=true --blame -c
    pool:
      vmImage: 'ubuntu-latest'
    container: UbuntuContainer

- template: /build/ci/job-template.yml
  parameters:
    prepScript: echo "no prep needed"
    name: Windows_x64_NetCore
    buildScript: dotnet build /p:SkipCuda=true /p:SkipNetFxBuild=true -c
    testScript: dotnet test /p:SkipCuda=true /p:SkipNetFxBuild=true --blame -c
    pool:
      vmImage: 'windows-latest'

- template: /build/ci/job-template.yml
  parameters:
    prepScript: echo "no prep needed"
    name: Windows_x64_NetFX
    buildScript: dotnet build /p:SkipCuda=true /p:SkipNetCoreBuild=true -c
    testScript: dotnet test /p:SkipCuda=true /p:SkipNetCoreBuild=true --blame -c
    pool:
      vmImage: 'windows-latest'

- template: /build/ci/job-template.yml
  parameters:
    prepScript: echo "no prep needed"
    name: MacOS_x64
    buildScript: dotnet build /p:SkipCuda=true -c
    testScript: dotnet test --blame /p:SkipCuda=true --blame -c
    pool:
      vmImage: 'macos-11'

################################################################################
# {Build} --> combine --> package to build native bits on multiple OS's
################################################################################


################################################################################
- job: Linux_Native_Build_For_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'main'))
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'ubuntu-latest'
  container: UbuntuContainer
  # Exact copy of the dependency install above - TODO share this somewhere
  steps:
  - script:
        ldd --version && (/sbin/ldconfig -p | grep stdc++) && (strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX) &&
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DE19EB17684BA42D &&
        sudo apt-get -y update &&
        sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libomp-dev libomp5 &&
        wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb &&
        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb &&
        sudo apt-get update; sudo apt-get install -y apt-transport-https && sudo apt-get update && sudo apt-get install -y dotnet-sdk-6.0 &&
        ldd --version && (/sbin/ldconfig -p | grep stdc++) && (strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX)
    displayName: Install dependencies

  - script: dotnet build -c $(BuildConfig) src/Redist/libtorch-cpu/libtorch-cpu.proj /p:UpdateSHA=true /p:SkipTests=true /p:TargetOS=linux /t:Build /p:IncludeLibTorchCpuPackages=true
    condition: eq(variables['BuildLibTorchPackages'], 'true')
    displayName: Download libtorch native binaries

  - script: dotnet build -c $(BuildConfig) src/Redist/libtorch-cuda-12.1/libtorch-cuda-12.1.proj /p:UpdateSHA=true /p:SkipTests=true /p:TargetOS=linux /t:Build /p:IncludeLibTorchCudaPackages=true
    condition: eq(variables['BuildLibTorchPackages'], 'true')
    displayName: Download libtorch native CUDA binaries

  - script: dotnet build -c $(BuildConfig) src/TorchSharp/TorchSharp.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build linux

  - script: dotnet build -c $(BuildConfig) src/TorchVision/TorchVision.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build TorchVision

  - script: dotnet build -c $(BuildConfig) src/TorchAudio/TorchAudio.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build TorchAudio

  - publish: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
    artifact: LinuxAssets

################################################################################
- job: Windows_Native_Build_For_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'main'))
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-latest'

  steps:

  - task: UseDotNet@2
    displayName: 'Use .NET Core sdk'
    inputs:
      packageType: sdk
      version: 6.0.402
      installationPath: $(Agent.ToolsDirectory)/dotnet

  - script: dotnet build -c $(BuildConfig) src/Redist/libtorch-cpu/libtorch-cpu.proj /p:UpdateSHA=true /p:SkipTests=true /p:TargetOS=windows /t:Build /p:IncludeLibTorchCpuPackages=true
    condition: eq(variables['BuildLibTorchPackages'], 'true')
    displayName: Download libtorch native binaries

  - script: dotnet build -c $(BuildConfig) src/Redist/libtorch-cuda-12.1/libtorch-cuda-12.1.proj /p:UpdateSHA=true /p:SkipTests=true /p:TargetOS=windows /t:Build /p:IncludeLibTorchCudaPackages=true
    condition: eq(variables['BuildLibTorchPackages'], 'true')
    displayName: Download libtorch native CUDA binaries


  - script: dotnet build -c $(BuildConfig) src/TorchSharp/TorchSharp.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build Windows

  - script: dotnet build -c $(BuildConfig) src/TorchVision/TorchVision.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build TorchVision

  - script: dotnet build -c $(BuildConfig) src/TorchAudio/TorchAudio.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build TorchAudio

  - publish: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
    artifact: WindowsAssets

# ################################################################################
- job: MacOS_Native_Build_For_Packages
# ################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'main'))
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'macos-11'
  steps:
  - script: dotnet build -c $(BuildConfig) src/Redist/libtorch-cpu/libtorch-cpu.proj /p:UpdateSHA=true /p:SkipTests=true  /p:TargetOS=mac /t:Build /p:IncludeLibTorchCpuPackages=true
    displayName: Download libtorch native binaries

  - script: dotnet build -c $(BuildConfig) src/TorchSharp/TorchSharp.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build mac

  - script: dotnet build -c $(BuildConfig) src/TorchVision/TorchVision.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build TorchVision

  - script: dotnet build -c $(BuildConfig) src/TorchAudio/TorchAudio.csproj /p:SkipCuda=true /p:SkipTests=true 
    displayName: Build TorchAudio

  - publish: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)
    artifact: MacAssets


################################################################################
- job: Build_TorchSharp_And_libtorch_cpu_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'main'))
  dependsOn:
  - Linux_Native_Build_For_Packages
  - Windows_Native_Build_For_Packages
  - MacOS_Native_Build_For_Packages
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-latest'
  steps:

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can
  # yup we even nuke the .git
  - script: rmdir /q /s .git
    displayName: Clean up space (.git)
    continueOnError: true

    # Download all bits contributing to the packages from the Linux build
  - download: current
    artifact: LinuxAssets

  - task: CopyFiles@2
    displayName: Copy linux native assets (TorchSharp) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets/TorchSharp
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchSharp

  - task: CopyFiles@2
    displayName: Copy linux native assets (TorchAudio) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets/TorchAudio
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchAudio

  - task: CopyFiles@2
    displayName: Copy linux native assets (TorchVision) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets/TorchVision
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchVision

  - task: CopyFiles@2
    displayName: Copy linux native assets (libtorch-cpu) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets/libtorch-cpu-linux-x64
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/libtorch-cpu-linux-x64

  - script: rmdir /s /q  $(Pipeline.Workspace)\LinuxAssets
    displayName: Free up space (LinuxAssets in workspace)

    # Download all bits contributing to the packages from the Mac build
  - download: current
    artifact: MacAssets

  - task: CopyFiles@2
    displayName: Copy mac native assets (TorchSharp) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/MacAssets/TorchSharp
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchSharp

  - task: CopyFiles@2
    displayName: Copy mac native assets (TorchAudio) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/MacAssets/TorchAudio
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchAudio

  - task: CopyFiles@2
    displayName: Copy mac native assets (TorchVision) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/MacAssets/TorchVision
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchVision

  - task: CopyFiles@2
    displayName: Copy mac native assets (libtorch-cpu) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/MacAssets/libtorch-cpu-osx-x64
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/libtorch-cpu-osx-x64

  - script: rmdir /s /q  $(Pipeline.Workspace)\MacAssets
    displayName: Free up space (MacAssets in workspace)

  - download: current
    artifact: WindowsAssets

  - task: CopyFiles@2
    displayName: Copy windows native assets (TorchSharp) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets/TorchSharp
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchSharp

  - task: CopyFiles@2
    displayName: Copy windows native assets (TorchAudio) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets/TorchAudio
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchAudio

  - task: CopyFiles@2
    displayName: Copy windows native assets (TorchVision) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets/TorchVision
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/TorchVision

  - task: CopyFiles@2
    displayName: Copy windows native assets (libtorch-cpu) to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets/libtorch-cpu-win-x64
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)/libtorch-cpu-win-x64

  - script: rmdir /s /q  $(Pipeline.Workspace)\WindowsAssets
    displayName: Free up space (windows assets in workspace)

  # Pack TorchSharp (and libtorch-cpu if BuildLibTorchPackages is true)
  - script: dotnet pack -c $(BuildConfig) --no-build -v:n /p:SkipNative=true /p:SkipTests=true /p:IncludeTorchSharpPackage=true /p:IncludeLibTorchCpuPackages=$(BuildLibTorchPackages) src/TorchSharp/TorchSharp.csproj
    displayName: Create Packages

  - script: rmdir /q /s bin\obj
    displayName: Clean up space (bin\obj)
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)

  - publish: $(Build.ArtifactStagingDirectory)
    displayName: Publish build packages
    artifact: BuildTorchSharpPackages

  - publish: $(Build.SourcesDirectory)/config
    displayName: Publish signing config
    artifact: config

################################################################################
# Only run if BuildLibTorchPackages is true
- job: Build_libtorch_cuda_win_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'main'), eq(variables['BuildLibTorchPackages'], 'true'))
  dependsOn:
  - Windows_Native_Build_For_Packages
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'windows-latest'
  steps:

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can
  # yup we even nuke the .git
  - script: rmdir /q /s .git
    displayName: Clean up space (.git)
    continueOnError: true

  - download: current
    artifact: WindowsAssets

  - task: CopyFiles@2
    displayName: Copy windows native assets to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/WindowsAssets
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)

  - script: rmdir /s /q  $(Pipeline.Workspace)\WindowsAssets
    displayName: Free up space (windows assets in workspace)

  - script: dotnet pack -c $(BuildConfig) --no-build -v:n /p:SkipNative=true /p:SkipTests=true /p:IncludeTorchSharpPackage=false /p:IncludeLibTorchCpuPackages=false /p:IncludeLibTorchCudaPackages=true src/TorchSharp/TorchSharp.csproj
    displayName: Create Packages

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can
  - script: rmdir /q /s bin\obj
    displayName: Clean up space (bin\obj)
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)

  - publish: $(Build.ArtifactStagingDirectory)
    displayName: Publish Windows CUDA build packages
    artifact: BuildWinCUDAPackages

################################################################################
- job: Build_libtorch_cuda_linux_Packages
################################################################################
  condition: and(ne(variables['system.pullrequest.isfork'], true), eq(variables['build.sourcebranchname'], 'main'), eq(variables['BuildLibTorchPackages'], 'true'))
  dependsOn:
  - Linux_Native_Build_For_Packages
  variables:
    BuildConfig: Release
    OfficialBuildId: $(BUILD.BUILDNUMBER)
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
  pool:
    vmImage: 'ubuntu-latest'
  container: UbuntuContainer
  # Exact copy of the dependency install above - TODO share this somewhere
  steps:
  - script:
        ldd --version && (/sbin/ldconfig -p | grep stdc++) && (strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX) &&
        sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys DE19EB17684BA42D &&
        sudo apt-get -y update &&
        sudo apt-get -y install clang-6.0 git cmake libunwind8 curl libomp-dev libomp5 &&
        wget https://packages.microsoft.com/config/ubuntu/18.04/packages-microsoft-prod.deb -O packages-microsoft-prod.deb &&
        sudo dpkg --purge packages-microsoft-prod && sudo dpkg -i packages-microsoft-prod.deb &&
        sudo apt-get update; sudo apt-get install -y apt-transport-https && sudo apt-get update && sudo apt-get install -y dotnet-sdk-6.0 &&
        ldd --version && (/sbin/ldconfig -p | grep stdc++) && (strings /usr/lib/x86_64-linux-gnu/libstdc++.so.6 | grep LIBCXX)
    displayName: Install dependencies

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can
  # yup we even nuke the .git
  - script: rm -fr .git
    displayName: Clean up space (.git)
    continueOnError: true

  - download: current
    artifact: LinuxAssets

  - task: CopyFiles@2
    displayName: Copy linux native assets to correct folder where the bits contributing to the packages are assembled
    inputs:
      sourceFolder: $(Pipeline.Workspace)/LinuxAssets
      targetFolder: $(Build.SourcesDirectory)/bin/obj/packprep/$(BuildConfig)

  - script: rm -fr  $(Pipeline.Workspace)/LinuxAssets
    displayName: Free up space (linux assets in workspace)

  - script: dotnet pack -c $(BuildConfig) --no-build -v:n /p:SkipNative=true /p:SkipTests=true /p:IncludeTorchSharpPackage=false /p:IncludeLibTorchCpuPackages=false /p:IncludeLibTorchCudaPackages=true src/TorchSharp/TorchSharp.csproj
    displayName: Create Packages

  # We are 10GB space-constrained on the Azure Pipelines CI system so clean up what we can
  - script: rm -fr bin/obj
    displayName: Clean up space (bin/obj)
    continueOnError: true

  - task: CopyFiles@2
    displayName: Copy packaged assets to staging folder
    inputs:
      sourceFolder: $(Build.SourcesDirectory)/bin/packages/$(BuildConfig)
      targetFolder: $(Build.ArtifactStagingDirectory)

  - publish: $(Build.ArtifactStagingDirectory)
    displayName: Publish Linux CUDA build packages
    artifact: BuildLinuxCUDAPackages

